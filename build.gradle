import org.jetbrains.kotlin.gradle.dsl.KotlinVersion
import org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask

plugins {
    id 'org.jetbrains.kotlin.jvm' version '+'
    id 'java'
}

group 'org.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()

    // Brigadier from Minecraft
    maven {
        url 'https://libraries.minecraft.net'
    }

    // LavaPlayer
    maven {
        url 'https://m2.dv8tion.net/releases'
    }

    // KiMochi
    maven {
        name = "GitHubPackages"
        url = "https://maven.pkg.github.com/KaKusaOAO/KiMochi"
        credentials {
            username = getProperty("github.actor") ?: System.getenv("GITHUB_ACTOR")
            password = getProperty("github.token") ?: System.getenv("GITHUB_TOKEN")
        }
    }
}

dependencies {
    // KiMochi
    implementation 'com.kakaouo:kimochi:1.0-build.41'

    // StringTemplate
    implementation 'org.antlr:ST4:4.3.4'

    // OpenAI Kotlin
    implementation 'com.aallam.openai:openai-client:3.2.0'

    // Ktor client, required by OpenAI Kotlin
    implementation "io.ktor:ktor-client-java:+"

    // JTokkit
    implementation 'com.knuddels:jtokkit:+'

    // JLine
    implementation 'org.jline:jline:+'

    // Kotlin Coroutines / Sync
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.0-Beta'

    // SLF4J
    implementation 'org.slf4j:slf4j-api:+'

    // JSON path
    implementation 'com.nfeld.jsonpathkt:jsonpathkt:+'

    // Mojang's Brigadier
    implementation 'com.mojang:brigadier:1.0.18'

    // Discord bot library JDA
    implementation 'net.dv8tion:JDA:+'

    // LavaPlayer
    implementation 'com.sedmelluq:lavaplayer:+'

    // JNA
    implementation 'net.java.dev.jna:jna:5.12.1'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0'
}

jar {
    manifest {
        attributes(
            'Main-Class': 'com.kakaouo.bot.mochi.Main',
        )
    }
}

tasks.register('fatJar', Jar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest.from jar.manifest
    classifier = 'all'
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    with jar
}

artifacts {
    archives fatJar
}

tasks
    .withType(KotlinCompilationTask.class)
    .configureEach {
        compilerOptions.languageVersion
            = KotlinVersion.KOTLIN_2_0
    }

test {
    useJUnitPlatform()
}